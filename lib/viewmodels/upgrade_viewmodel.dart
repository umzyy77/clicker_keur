import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../core/services/upgrade_service.dart';
import '../models/upgrade_full_model.dart';
import '../viewmodels/player_viewmodel.dart';

class UpgradeViewModel extends ChangeNotifier {
  final UpgradeService _upgradeService = UpgradeService();
  List<PlayerUpgradeModel> _upgrades = [];
  bool _isLoading = false;
  String? _errorMessage;
  int? _playerId;

  List<PlayerUpgradeModel> get upgrades => _upgrades;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  /// üîπ Initialise l'ID du joueur (appel√© une seule fois)
  void init(BuildContext context) {
    if (_playerId == null) {
      _playerId = Provider.of<PlayerViewModel>(context, listen: false).player?.idPlayer;
      print("üîç [UpgradeViewModel] ID Joueur charg√© : $_playerId");
    }
  }

  /// üîπ Charge toutes les am√©liorations disponibles pour le joueur
  Future<void> loadUpgrades(BuildContext context) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      init(context);

      if (_playerId == null) {
        _errorMessage = "Joueur non trouv√©.";
        _isLoading = false;
        notifyListeners();
        return;
      }

      print("üîç [UpgradeViewModel] Chargement des am√©liorations pour le joueur $_playerId");

      List<PlayerUpgradeModel> upgrades = await _upgradeService.getAllUpgrades(_playerId!);

      if (upgrades.isEmpty) {
        _errorMessage = "Aucune am√©lioration trouv√©e.";
        print("‚ö†Ô∏è [UpgradeViewModel] Aucune am√©lioration re√ßue !");
      } else {
        _upgrades = upgrades;
        print("‚úÖ [UpgradeViewModel] Am√©liorations charg√©es : $_upgrades");
      }
    } catch (e) {
      _errorMessage = "Erreur lors du chargement des am√©liorations : ${e.toString()}";
      print("‚ùå [UpgradeViewModel] Erreur : $_errorMessage");
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// üîπ Ach√®te une am√©lioration
  Future<void> buyUpgrade(BuildContext context, int upgradeId) async {
    _isLoading = true;
    notifyListeners();

    try {
      init(context);

      if (_playerId == null) {
        _errorMessage = "Joueur non trouv√©.";
        _isLoading = false;
        notifyListeners();
        return;
      }

      print("üõí Tentative d'achat de l'upgrade $upgradeId pour le joueur $_playerId");

      bool success = await _upgradeService.buyUpgrade(_playerId!, upgradeId);
      if (success) {
        print("‚úÖ Achat r√©ussi, rechargement des am√©liorations...");
        await loadUpgrades(context);
      } else {
        _errorMessage = "√âchec de l'achat de l'am√©lioration.";
        print("‚ùå √âchec de l'achat.");
      }
    } catch (e) {
      _errorMessage = "Erreur lors de l'achat : ${e.toString()}";
      print("‚ùå [UpgradeViewModel] Erreur : $_errorMessage");
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
}
